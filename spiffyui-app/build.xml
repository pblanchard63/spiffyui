<?xml version="1.0" encoding="UTF-8"?>

<!-- This is the build file for the Spiffy UI Framwork Application.  This application
     uses almost every part of the Spiffy UI framework and has many performance improvements.
-->
<project name="Spiffy UI Framework Application" xmlns:ivy="antlib:org.apache.ivy.ant" default="all" basedir=".">
    <target name="all" depends="setup" description="Build, compile, and package the entire application">
        <!-- This application will call the Spiffy UI framework build.
             It is possible to build the framework separately, but building
             it in the context of this application is the most common way
             of building it. -->
        <subant antfile="build.xml" buildpath="${build.base}/../spiffyui/build/" />
        
        <antcall target="app"/>
    </target>
    
    <target name="framework.compile.check">
        <condition property="is.framework.compiled" else="is.framework.not.compiled">
            <available file="${spiffyui}/dist"/>
        </condition>
    </target>
    
    <target name="framework.nocompileError" if="is.framework.not.compiled">
        <fail message="You must compile the framework with the all target before calling the client target." />
    </target>
    
    <target name="app" depends="setup,resolve,framework.compile.check,framework.nocompileError" 
            description="Build, compile, and package just the Spiffy UI application">
        <!-- Now that we've built the Spiffy UI framework we can import 
             the Ant tasks available in that framework. -->
        <taskdef resource="tasks.properties">
            <classpath>
                <fileset dir="${spiffyui}/build/lib" includes="*.jar"/>
                <fileset dir="${spiffyui}/dist" includes="*.jar"/>
            </classpath>
        </taskdef>
        
    	<antcall target="zip-template"/>
    	
        <antcall target="addVersionInfo"/>
        
        <antcall target="HTMLProps"/>
        
        <antcall target="gwt-compile">
            <param name="gwttarget" value="org.spiffyui.spsample.index"/>
        </antcall>
        
        <antcall target="compile"/>
        
        <antcall target="js-min" />
        
        <antcall target="css-min" />
        
        <antcall target="package" />
    </target>
    
    <target name="clearcache" description="Clear the Apache Ivy cache" depends="setup,ivySettings" unless="build.from.maven">
        <ivy:cleancache />
    </target>
    
    <target name="ivySettings" unless="build.from.maven">
        <ivy:settings file="${build}/ivysettings.xml" />
    </target>
    
    <target name="resolve" description="Retrieve dependencies with Apache Ivy" depends="ivySettings" unless="build.from.maven">
        <ivy:retrieve log="download-only" />
    </target>
    
    <property name="ivy.install.version" value="2.3.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="hasDownloadedIvy">
        <property name="hasDownloadedIvy" value="true" />

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true" />
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    
    <target name="setup" description="Setup build dependencies and properties and get Subversion information" depends="init-ivy" unless="hasSetup">
        <!-- The setup task doesn't take very much time, but it
             does send some output to the console.  We use this 
             property to make sure we only run it once. 
        -->
        <property name="hasSetup" value="true" />
        
        <property environment="env"/>

        <!-- These are all the project relative paths.  Please add new paths
             here so they are easier to find when they change. -->
        <condition property="build.base" value="${env.SPSAMPLE_BASE}" else="${basedir}">
          <isset property="${env.SPSAMPLE_BASE}"/>
        </condition>
        
        <condition property="ivy.default.ivy.user.dir" 
                   value="${env.spiffy_ivy_dir}">
          <isset property="env.spiffy_ivy_dir"/>
        </condition>

        <property name="root" location="${build.base}"/>
        <property name="spiffyui" location="${root}/../spiffyui"/>
    	<property name="template" location="${root}/../spiffyui-template"/>
        <property name="build" location="${build.base}/build"/>
        <property name="ivy.lib.dir" value="${build}/lib"/>
        <property name="sample.src" location="${root}/src/main/java"/>
        <property name="sample.res.src" location="${root}/src/main/resources"/>
        <property name="sample.web.src" location="${root}/src/main/webapp"/>
        <property name="sample.out" location="${root}/target"/>
        <property name="sample.out.www" location="${sample.out}/www"/>
        <property name="sample.out.classes" location="${sample.out}/classes"/>
        <property name="sample.out.gen" location="${sample.out}/gen"/>
        
        <mkdir dir="${sample.out}"/>
        <mkdir dir="${sample.out.classes}"/>
        <mkdir dir="${sample.out.www}"/>
        
        <property name="spiffy.root" location="${build.base}/../spiffyui"/>
    </target>
    
    <target name="checkstyle.compile.check">
        <condition property="is.compiled" else="is.not.compiled">
            <available file="${sample.out.classes}"/>
        </condition>
    </target>
    
    <target name="checkstyle.nocompileError" if="is.not.compiled">
        <fail message="You must compile before you run Checkstyle" />
    </target>

    <target name="checkstyle" depends="setup,resolve,checkstyle.compile.check,checkstyle.nocompileError">
        <taskdef resource="checkstyletask.properties">
            <classpath>
                <fileset dir="${build.base}/../spiffyui/build/lib" includes="*.jar"/>
            </classpath>
        </taskdef>

        <!-- Spiffy UI makes all Checkstyle warnings into build errors.  That
             means the build will fail if there are any Checkstyle errors in 
             any of the source files in this application or the Spiffy UI framework.
        -->
        <checkstyle config="${build.base}/../spiffyui/build/checkstyle_checks.xml" failOnViolation="true">
            <formatter type="plain"/>
            <formatter type="xml" toFile="checkstyle_errors.xml"/>

            <fileset dir="src" excludes="${checkstyle.ignore.files},**/*Rsrc*,**/*Strings.java" includes="**/*.java" />
            <!-- Specify a base dir to make the output a bit more readable -->
            <property key="checkstyle.basedir" value="${root}" />
            
            <classpath>
                <pathelement location="${sample.out.classes}"/>
                <fileset dir="${build}/lib" includes="*.jar"/>
            </classpath>
        </checkstyle>
    </target>
    
    <target name="js-min" description="Minimize the JavaScript with the Closure compiler" depends="setup">
        <closure jsfile="${sample.out.www}/spsample.min.js" 
                 closurejar="${spiffyui}/build/lib/closure-compiler-v20130227.jar"
                 compilationLevel="SIMPLE_OPTIMIZATIONS"
                 warninglevel="DEFAULT">
        
            <fileset dir="${sample.out.www}" includes="js/**/amplify.store.js" />
            <fileset dir="${sample.out.www}" includes="js/**/history.adapter.jquery.js" />
            <fileset dir="${sample.out.www}" includes="js/**/history.js" />
            <fileset dir="${sample.out.www}" includes="js/**/history.html4.js" />
             
            <fileset dir="${sample.out.www}" includes="js/**/*.js" 
                     excludes="**/jquery.min.js, **/jquery-2.*.js, **/unittest/**, **/spsample/**, **/lib/i18n/**, **/jquery-ui.js, **/history*.js, **/amplify*.js, **/json2.js, **/spsample.js, **/qunit.js" />
        
            <!-- By default the Spiffy UI framework includes all of JQuery UI.
                 This includes a lot of JavaScript that we don't need for this
                 sample application.  By specifying the specific files we need
                 we save about 30k from out page download size. -->     
            <fileset dir="${sample.out.www}" includes="**/jquery-ui.js" />            
            <fileset dir="${root}/src/main/js" includes="**/*.js" excludes="**/qunit*" />
        </closure>

        <!-- Then we GZIP it for web servers that support GZIP -->
        <gzip src="${sample.out.www}/spsample.min.js" destfile="${sample.out.www}/spsample.min.js.gz"/>
        
        <!-- We copy over all the JavaScript files for dev mode -->
        <mkdir dir="${sample.out.www}/js/spsample"/>
        <copy todir="${sample.out.www}/js/spsample">
            <fileset dir="${root}/src/main/js" includes="**/*" />
        </copy>
    </target>
    
    <target name="css-min" description="Minimize the CSS with the YUI compiler" depends="setup">
        <concat destfile="${sample.out.www}/spsample.tmp.css" force="yes">
            <!-- Since Cascading Style Sheets cascade the order is important here.  We need to make sure
                  That we load in the right order so different styles can be overwriten. -->
            <fileset dir="${sample.out.www}" includes="spiffyui.min.css" />
            <fileset dir="${sample.out.www}" includes="spsample.css" />
        </concat>

        <java classname="com.yahoo.platform.yui.compressor.Bootstrap"
            fork="true" failonerror="true" maxmemory="256m">
            <arg value="-o"/>
            <arg value="${sample.out.www}/spsample.min.css"/>
            <arg value="${sample.out.www}/spsample.tmp.css"/>
            <classpath>
                <fileset dir="${spiffyui}/build/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${java.class.path}"/>
                <!-- Adding this so that maven builds will include the necessary ant dependencies -->
                <pathelement path="${compile_classpath}"/>
            </classpath>
        </java>

        <!-- Now that we have created the compressed file we don't
             need the concatenated file -->
        <delete file="${sample.out.www}/spsample.tmp.css" />

        <!-- Then we can GZIP the file -->
        <gzip src="${sample.out.www}/spsample.min.css" destfile="${sample.out.www}/spsample.min.css.gz"/>
        
        <java classname="com.yahoo.platform.yui.compressor.Bootstrap"
            fork="true" failonerror="true" maxmemory="256m">
            <arg value="-o"/>
            <arg value="${sample.out.www}/spsample_mobile.min.css"/>
            <arg value="${sample.out.www}/spsample_mobile.css"/>
            <classpath>
                <fileset dir="${spiffyui}/build/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${java.class.path}"/>
                <!-- Adding this so that maven builds will include the necessary ant dependencies -->
                <pathelement path="${compile_classpath}"/>
            </classpath>
        </java>
        
        <gzip src="${sample.out.www}/spsample_mobile.min.css" destfile="${sample.out.www}/spsample_mobile.min.css.gz"/>
    </target>
    
    <target name="HTMLProps" depends="setup" description="Combine the HTML files in this project into a GWT message bundle">
        <mkdir dir="${sample.out.gen}/org/spiffyui/spsample/client"/>
        
        <htmlprops properties="${sample.out.gen}/org/spiffyui/spsample/client/SPSampleStrings.properties"
                   package="org.spiffyui.spsample.client">
            <fileset dir="${sample.res.src}/org/spiffyui/spsample/client" includes="**/*.html" />
        </htmlprops>
        
    </target>
    
    <!-- This target calls the GWT compiler inline and
         moves the files around so we get the compiled
         GWT without the directory with the package name -->
    <target name="gwt-compile" description="Call the GWT compiler for this project">
        <java classname="com.google.gwt.dev.Compiler"
            fork="true" failonerror="true" maxmemory="256m">
            <arg value="-style"/>
            <arg value="OBF"/>
            <arg value="-localWorkers"/>
            <arg value="8"/>
            <arg value="-strict"/>
            <arg value="-war"/>
            <arg value="${sample.out.www}"/>
            <arg value="${gwttarget}"/>
            <classpath>
                <pathelement location="${sample.out.classes}"/>
                <pathelement location="${sample.out.gen}"/>
                <pathelement location="${sample.res.src}"/>
                <pathelement location="${sample.src}"/>
                <fileset dir="${build}/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${spiffyui}/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${spiffyui}/dist">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </java>
        
        <!-- GWT compiles files into a directory with the same
             name as the package.  We want to strip that off. 
             If we add more GWT modules to the project we'll 
             need to skip this step for them. -->
        <move todir="${sample.out.www}" failonerror="false">
            <fileset dir="${sample.out.www}/org.spiffyui.spsample.index" includes="**/*" />
        </move>
        
        <delete dir="${sample.out.www}/org.spiffyui.spsample.index" />

        <gziplist dest="${sample.out.www}">
            <fileset dir="${sample.out.www}" includes="*.*" excludes="inde*.ht*, *.gz" />
        </gziplist>
        
        <gziplist dest="${sample.out.www}/images">
            <fileset dir="${sample.out.www}/images" includes="*" />
        </gziplist>
        
    </target>
    
    <target name="addVersionInfo" description="Generate the buildnum.properties file with build information">
        <!-- This is the version number information that shows up in the footer
             of the application.  The revinfo task can get revision information
             from Subversion or GIT.  Since GIT revision numbers are incremental
             the task also includes the last commit date for GIT files.
        -->
        <epochtstamp property="builddate" />
        <revinfo dir="${root}" />
        <mkdir dir="${sample.out.classes}/org/spiffyui/spsample/server"/>

        <echo file="${sample.out.classes}/org/spiffyui/spsample/server/buildnum.properties">
build.date=${builddate}
build.user=${user.name}
build.version=1.6-SNAPSHOT
build.revision=${revision.number} 
build.revision.date=${revision.date}
build.dir=${root}
        </echo>
    </target>
    
    <target name="compile" description="Call the Java compiler for this project">
        <!-- Compile all the Java -->
        <javac srcdir="${sample.src}/org/spiffyui/spsample/server" destdir="${sample.out.classes}" 
               debug="true" deprecation="yes"
               includeantruntime="false">
            <compilerarg value="-Xlint" />
            <classpath>
                <fileset dir="${root}/build/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${spiffyui}/lib">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${spiffyui}/dist">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${java.class.path}"/>
            </classpath>
        </javac>
        
        <antcall target="checkstyle" />
    </target>
    
    <target name="package" depends="setup" description="Package the contents of this project into spsample.war">
        <!-- Create the distribution directory -->
        <delete file="${sample.out}/spsample.war" />
        
        <!-- GWT 2.2 outputs a directory called WEF-INF/deploy with
             a lot of symbol maps files in it.  I think these files 
             are for JavaScript debugging, but I can't find any reference
             to them in the documentation.  They make our WAR almost
             twice as large so we remove them before building the WAR. -->
        <delete dir="${sample.out.www}/WEB-INF"/>

        <!-- We want to include the Maven plugin documentation if it's available, 
             but some systems, notably Macs, don't have the JavaDoc tool by default and
             we don't want to make the build fail for this. -->
        <mkdir dir="${spiffyui}/build/maven/maven-spiffyui-plugin/target/site/"/>

        <war destfile="${sample.out}/spsample.war" webxml="${sample.web.src}/WEB-INF/web.xml">
            <fileset dir="${sample.out.www}"/>
            <zipfileset dir="${sample.out.classes}" prefix="WEB-INF/classes" >
                <include name="**/*"/>
            </zipfileset>
            
            <!--This is the QUnit test framework classes -->
            <zipfileset dir="${root}/src/main/js/lib" prefix="js/lib" >
                <include name="**/*"/>
            </zipfileset>
            
            <!-- We need to add the JARs to support the spiffy framework to
                 our WAR file -->
            <zipfileset dir="${spiffyui}/lib" prefix="WEB-INF/lib" >
                <include name="**/*.jar"/>
            </zipfileset>     
            <zipfileset dir="${spiffyui}/dist" prefix="WEB-INF/lib" >
                <include name="**/*.jar"/>
            </zipfileset>
            
            <!-- We need the source HTML files to we can serve them when asked for
                 escaped fragments. -->
            <zipfileset dir="${sample.res.src}/org/spiffyui/spsample/client" prefix="ajax" >
                <include name="**/*.html"/>
            </zipfileset>
            
            <!-- We need to include the HTML files for localization support -->
            <zipfileset dir="${sample.res.src}/org/spiffyui/spsample/client" 
                        prefix="WEB-INF/classes/org/spiffyui/spsample/client" >
                <include name="**/*.html"/>
            </zipfileset>
            
            <!-- We need to include the properties files for localization support -->
            <zipfileset dir="${root}/src/main/java/org/spiffyui/spsample/client/i18n" 
                        prefix="WEB-INF/classes/org/spiffyui/spsample/client/i18n" >
                <include name="**/*.properties"/>
            </zipfileset>
            
            <!-- We also want to include the JavaDoc -->
            <zipfileset dir="${spiffyui}/target/classes/javadoc-all" prefix="javadoc" />
            
            <!-- We also want to include the JavaDoc -->
            <zipfileset dir="${spiffyui}/build/maven/maven-spiffyui-plugin/target/site/" prefix="maven-plugin"  />
        </war>
    </target>
    
    <target name="package-appengine" depends="setup" description="Expand the war and add the configuration files for deploying to SpiffyUI.org">
        <!-- Create the app engine directory -->
        <mkdir dir="${sample.out}/appengine"/>
        <unzip src="${sample.out}/spsample.war" dest="${sample.out}/appengine"/>
        
        <copy file="${sample.web.src}/WEB-INF/appengine-web.xml" 
              tofile="${sample.out}/appengine/WEB-INF/appengine-web.xml" overwrite="true"/>
        
        <copy file="${sample.web.src}/WEB-INF/web-ae.xml" 
              tofile="${sample.out}/appengine/WEB-INF/web.xml" overwrite="true"/>
        
        <echo>
======================================================================== 
        
    You are now ready to deploy the Spiffy UI application to SpiffyUI.org on 
    Google App Engine.  You must first install the App Engine SDK and have 
    permission to deploy this application.  Then you can deploy with the 
    following command:
        
    Windows:
        appengine-java-sdk\bin\appcfg.cmd update ${sample.out}/appengine
            
    Linux and Mac:
        appengine-java-sdk/bin/appcfg.sh update target/appengine
            
    Once the application is deployed you can access it at:
        
        http://www.spiffyui.org
            
    The application can be administered here:
        
        https://appengine.google.com
        
======================================================================== 
        </echo>
    </target>
    
    <target name="package-appengine-staging" depends="setup" description="Expand the war and add the configuration files for deploying to spiffyui-staging.appspot.com">
        <!-- Create the app engine directory -->
        <mkdir dir="${sample.out}/appengine-staging"/>
        <unzip src="${sample.out}/spsample.war" dest="${sample.out}/appengine-staging"/>
        
        <copy file="${sample.web.src}/WEB-INF/appengine-web-staging.xml" 
              tofile="${sample.out}/appengine-staging/WEB-INF/appengine-web.xml" overwrite="true"/>
        
        <copy file="${sample.web.src}/WEB-INF/web-ae.xml" 
              tofile="${sample.out}/appengine-staging/WEB-INF/web.xml" overwrite="true"/>
        
        <!-- This robots file blocks the staging server from search results.
             We make sure to only include it in the staging because we want to
             make sure that we don't end up with pages from the staging server
             in the search results. -->
        <copy file="${sample.web.src}/robots.txt" 
              tofile="${sample.out}/appengine-staging/robots.txt" overwrite="true"/>
        
        <echo>
======================================================================== 
        
    You are now ready to deploy the Spiffy UI application to the SpiffyUI.org 
    staging server on Google App Engine.  You must first install the App Engine 
    SDK and have permission to deploy this application.  Then you can deploy 
    with the following command:
        
    Windows:
        appengine-java-sdk\bin\appcfg.cmd update ${sample.out}/appengine-staging
            
    Linux and Mac:
        appengine-java-sdk/bin/appcfg.sh update spiffyui-app/target/appengine-staging
            
    Once the application is deployed you can access it at:
        
        http://spiffyui-staging.appspot.com
            
    The application can be administered here:
        
        https://appengine.google.com
        
======================================================================== 
        </echo>
    </target>
    
    <target name="run" depends="setup,resolve,jetty.setup" 
            description="Run the Spiffy sample project with an embedded Jetty server.">
        <!--
        Setup for Jetty
        -->
        <path id="jetty.plugin.classpath">
            <fileset dir="${build}/lib" includes="*.jar"/>
        </path>
        <taskdef classpathref="jetty.plugin.classpath" resource="tasks.properties" loaderref="jetty.loader" />
        
        <echo>
========================================================================

        Running the Spiffy UI Sample application with an embedded
        Jetty server. Press Ctrl+C to stop the server. 

        Access Spiffy at: http://localhost:8080

========================================================================
        </echo>
        
        <jetty tempDirectory="${root}/jetty-temp">
            <webApp name="spsample" warfile="${sample.out}/spsample.war" contextpath="/" />
        </jetty>
    </target>

    <target name="jetty.setup">
        <fail message="The spsample.war file is missing.  You must build the WAR with the all target before you can run.">
            <condition>
                <not>
                    <available file="${sample.out}/spsample.war"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="clean" depends="setup" description="Remove the artifacts generated by this build">
        <!-- Call the Spiffy UI build -->
        <ant antfile="${spiffyui}/build/build.xml" 
             dir="${spiffyui}"
             target="spiffy.clean">
        </ant>
        
        <delete dir="${sample.out}"/>
        <delete dir="${root}/jetty-temp"/>
        <delete dir="${root}/war"/>
        <delete dir="${ivy.lib.dir}"/>
    </target>
	
	<target name="zip-template" depends="setup" description="Add the spiffyui-templates to the WEB-INF/classes">
        <!-- ant template -->
		<zip destfile="${sample.out.classes}/spiffyui-template-ant.zip"
            basedir="${template}-ant"
            excludes="**/.svn/**"/>
		
		<!-- maven template -->
		<zip destfile="${sample.out.classes}/spiffyui-template-maven.zip"
		            basedir="${template}-maven"
		            excludes="**/.svn/**"/>
	</target>
</project>
